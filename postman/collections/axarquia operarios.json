{
	"info": {
		"_postman_id": "e68e7792-3128-4066-8d84-44fe708491be",
		"name": "axarquia operarios",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "25584993-e68e7792-3128-4066-8d84-44fe708491be"
	},
	"item": [
		{
			"name": "Get * operarios",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "146bb584-da49-413e-b476-e89a09a9d8dc",
						"exec": [
							"[\r",
							"    {\r",
							"        \"id_Operario\": 1,\r",
							"        \"nom_ope\": \"Gema Gavilan\"\r",
							"    },\r",
							"    {\r",
							"        \"id_Operario\": 2,\r",
							"        \"nom_ope\": \"Antonio Rojas\"\r",
							"    },\r",
							"    {\r",
							"        \"id_Operario\": 3,\r",
							"        \"nom_ope\": \"Javier Solis\"\r",
							"    },\r",
							"    {\r",
							"        \"id_Operario\": 4,\r",
							"        \"nom_ope\": \"Salvador MuiÃ±oz\"\r",
							"    },\r",
							"    {\r",
							"        \"id_Operario\": 5,\r",
							"        \"nom_ope\": \"Juan Antonio\"\r",
							"    },\r",
							"    {\r",
							"        \"id_Operario\": 6,\r",
							"        \"nom_ope\": \"Francisco Rojas\"\r",
							"    },\r",
							"    {\r",
							"        \"id_Operario\": 7,\r",
							"        \"nom_ope\": \"David Montero\"\r",
							"    },\r",
							"    {\r",
							"        \"id_Operario\": 8,\r",
							"        \"nom_ope\": \"Isabel Maria\"\r",
							"    },\r",
							"    {\r",
							"        \"id_Operario\": 9,\r",
							"        \"nom_ope\": \"Victoriano\"\r",
							"    },\r",
							"    {\r",
							"        \"id_Operario\": 10,\r",
							"        \"nom_ope\": \"Estela Rojas\"\r",
							"    },\r",
							"    {\r",
							"        \"id_Operario\": 11,\r",
							"        \"nom_ope\": \"Antonio MuÃ±oz\"\r",
							"    },\r",
							"    {\r",
							"        \"id_Operario\": 12,\r",
							"        \"nom_ope\": \"Rafael Sebastian\"\r",
							"    },\r",
							"    {\r",
							"        \"id_Operario\": 13,\r",
							"        \"nom_ope\": \"M Rojas\"\r",
							"    },\r",
							"    {\r",
							"        \"id_Operario\": 14,\r",
							"        \"nom_ope\": \"Maite\"\r",
							"    },\r",
							"    {\r",
							"        \"id_Operario\": 15,\r",
							"        \"nom_ope\": \"F R Moreno\"\r",
							"    },\r",
							"    {\r",
							"        \"id_Operario\": 16,\r",
							"        \"nom_ope\": \"Diana\"\r",
							"    },\r",
							"    {\r",
							"        \"id_Operario\": 17,\r",
							"        \"nom_ope\": \"Fabian Gomez\"\r",
							"    },\r",
							"    {\r",
							"        \"id_Operario\": 18,\r",
							"        \"nom_ope\": \"J. Ferney\"\r",
							"    }\r",
							"]\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d42ead8f-5d8e-4fec-9043-a79cb1cf5dad",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "221ef050-dfce-4b60-bfdf-be0e5907d73a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/operario/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"operario",
						""
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "operarios ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "62c6a521-4b1c-4d83-9b4a-282a7b986eda",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "e03f2dc0-54ab-4461-be36-5c1aece482c4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/operario/17",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"operario",
						"17"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "crear operario",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5cb722a7-2cab-4ae9-b3b7-2633dc6e8afb",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "8e011c6a-ddc1-4a89-98e4-b71ce9c2fe9f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id_Operario\": 19,\n    \"nom_ope\": \"Gema Garmendia\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/operario/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"operario",
						""
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "actualizar operario",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "47a51ef0-461d-44ea-a5cf-d7e69f93892a",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "d5b26b02-f1f0-4542-8d63-6a633a4e2d17",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"nom_ope\": \"Gema Garmendiia\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/operario/19",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"operario",
						"19"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "eliminar operario",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2a3609bc-929c-4fef-b1f0-e199de27df05",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "19f19a2b-80a6-415c-8ac8-262b1cbbebcc",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/operario/19",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"operario",
						"19"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "6c34eb3d-f834-48f0-874d-a974d09a83e9",
				"type": "text/javascript",
				"exec": [
					"[",
					"    {",
					"        \"id_Operario\": 1,",
					"        \"nom_ope\": \"Gema Gavilan\"",
					"    },",
					"    {",
					"        \"id_Operario\": 2,",
					"        \"nom_ope\": \"Antonio Rojas\"",
					"    },",
					"    {",
					"        \"id_Operario\": 3,",
					"        \"nom_ope\": \"Javier Solis\"",
					"    },",
					"    {",
					"        \"id_Operario\": 4,",
					"        \"nom_ope\": \"Salvador MuiÃ±oz\"",
					"    },",
					"    {",
					"        \"id_Operario\": 5,",
					"        \"nom_ope\": \"Juan Antonio\"",
					"    },",
					"    {",
					"        \"id_Operario\": 6,",
					"        \"nom_ope\": \"Francisco Rojas\"",
					"    },",
					"    {",
					"        \"id_Operario\": 7,",
					"        \"nom_ope\": \"David Montero\"",
					"    },",
					"    {",
					"        \"id_Operario\": 8,",
					"        \"nom_ope\": \"Isabel Maria\"",
					"    },",
					"    {",
					"        \"id_Operario\": 9,",
					"        \"nom_ope\": \"Victoriano\"",
					"    },",
					"    {",
					"        \"id_Operario\": 10,",
					"        \"nom_ope\": \"Estela Rojas\"",
					"    },",
					"    {",
					"        \"id_Operario\": 11,",
					"        \"nom_ope\": \"Antonio MuÃ±oz\"",
					"    },",
					"    {",
					"        \"id_Operario\": 12,",
					"        \"nom_ope\": \"Rafael Sebastian\"",
					"    },",
					"    {",
					"        \"id_Operario\": 13,",
					"        \"nom_ope\": \"M Rojas\"",
					"    },",
					"    {",
					"        \"id_Operario\": 14,",
					"        \"nom_ope\": \"Maite\"",
					"    },",
					"    {",
					"        \"id_Operario\": 15,",
					"        \"nom_ope\": \"F R Moreno\"",
					"    },",
					"    {",
					"        \"id_Operario\": 16,",
					"        \"nom_ope\": \"Diana\"",
					"    },",
					"    {",
					"        \"id_Operario\": 17,",
					"        \"nom_ope\": \"Fabian Gomez\"",
					"    },",
					"    {",
					"        \"id_Operario\": 18,",
					"        \"nom_ope\": \"J. Ferney\"",
					"    }",
					"]",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c40726e6-c30e-4c80-b43d-9c1ef148636d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "b4aa0ac0-4208-4ebb-9070-c3ea6fe23514",
			"key": "id",
			"value": "1"
		},
		{
			"id": "a463a79d-b93d-4a44-9431-a9bcf6534b25",
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}